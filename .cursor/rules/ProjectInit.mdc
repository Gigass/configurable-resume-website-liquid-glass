---
alwaysApply: true
when:
  any:
    - not: exists(.docs)
    - all:
        - exists(.docs)
        - not: hasFiles(.docs)
---

### 【阶段一：唯一可信时间戳 · CSBT】

- 所有初始化操作的**全局唯一时间基准**，须通过终端命令实时获取（禁止AI伪造/补录）。
- 命令：date -u +"%Y-%m-%dT%H:%M:%S.%6NZ"
- 该CSBT贯穿本轮所有产出，体现在文件名、日志、内容内部字段。
- 文档用中文写

---

### 【阶段二：自动全域信息采集】

1. **递归扫描**项目根目录和所有子目录（关注源代码、配置、脚本、说明文档、测试用例等）。
2. 对每个非.docs下的文件，采集：
   - 文件名、完整路径、文件类型/后缀
   - 文件大小、最后修改时刻
   - **内容快照**（支持结构化识别：YAML/JSON/Markdown/代码片段/配置文件等。超长文件节选最关键结构和开头若干行，避免噪音。）
3. **结构化元数据归纳**：
   - 项目名称、主描述（若有 `README.md` 优先，或多文件聚合自动提炼一句专业性描述）
   - 技术栈、主框架、依赖（自动识别`requirements.txt`、`package.json`、`pyproject.toml`等）
   - 入口文件、核心模块目录结构
   - 已有的测试/CI/部署配置要点
   - 关键历史变更痕迹（如 git log, CHANGELOG, 部分 commit 描述）
   - 其它可自动采集的组织信息与专业注解（如 copyright）

---

### 【阶段三：.docs目录自动构建及内容生成】

- 自动创建标准目录结构：
  ```
  .docs/
  ├── README-DOCS.md
  ├── STATE/
  ├── PROCESS/
  ├── RULES/
  └── TEMP/
  ```

1. `.docs/README-DOCS.md`
   - 用自动采集的项目描述、结构要点、关键组件、专业注解填充，形成专业级介绍（力求一屏读懂项目精髓）。
   - 标明此版本全部自动生成及时间戳。
2. `.docs/STATE/STATE-000_PROJECT_INIT.md`
   - 结构化记录初始化时采集到的关键元数据：项目基础结构、主要模块、依赖、当前发现的“状态基线”。
   - 列明各结构、主文件关系及专业注解，便于后续查阅和对比变迁。
3. `.docs/PROCESS/`
   - 无历史过程，初创项目可留空，后续按功能沉淀里程碑。
4. `.docs/RULES/`
   - 可生成“初始化生成规则”说明文档，解释初始化过程与时间可追溯性要求。
5. `.docs/TEMP/{CSBT}_INIT.slog`
   - 标准结构索引初始化意图、时间及本轮所有产物位置。

---

### 【阶段四：专业化输出及声明】

- 输出结构化初始化结果：（必要时给用户可视化）包括：
  - 采集要点建议摘要
  - 主要技术/结构归纳
  - 文件层次与注解列表
  - 自动生成的所有文档路径/说明
- 明确提示：`已自动完成共享大脑初始化，所有内容均基于本地项目自动采集。`

---

### 【阶段五：守护与补全】

- 后续如手动增加/发现关键基础信息缺失，可补录进STATE/及README-DOCS.md，记录各次修订可追溯“来源/原因/时间/作者”。
- 任何缺失/异常需自触发修复（典型如误删、目录损坏），且写入.slog留档。

---
